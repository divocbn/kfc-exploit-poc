"use client"

import { useAtom, useAtomValue } from "jotai"
import { useRouter } from "next/navigation"
import { forwardRef, useCallback } from "react"
import { toast } from "sonner"
import { kfcBasketIdAtom, shoppingCartAtom } from "~/atoms/cart.atom"
import { shopAtom } from "~/atoms/shop.atom"
import { cn } from "~/lib/utils"
import { kfcBasketApi } from "~/server/basket.kfc-api"

export interface ProductCardProps
  extends React.HTMLAttributes<HTMLDivElement> {
  title: string
  image: string
  price: number
}

/**
 * Add tailwind variants for sizing
 */
const ProductCard = forwardRef<HTMLDivElement, ProductCardProps>(
  ({ title, image, price, className, ...props }, ref) => {
    const router = useRouter();

    const [shop, setShop] = useAtom(shopAtom);
    const [kfcBasketId, setKfcBasketId] = useAtom(kfcBasketIdAtom);
    const [shoppingCart, setShoppingCart] = useAtom(shoppingCartAtom);


    const addItem = async (title: string, price: number) => {
      let _basketId = "";
      if (kfcBasketId == "" || kfcBasketId == undefined) {
        const basket = await kfcBasketApi.createBasket(shop.id);
        _basketId = basket.id;

        setKfcBasketId(basket.id);
      } else _basketId = kfcBasketId as string;

      toast(`${title} zum Warenkorb hinzugefügt. (${_basketId})`);
      setShoppingCart(_cart => [..._cart, {
        id: "test",
        image: image,
        name: title,
        price: price
      }]);
    }

    return (
      <div
        ref={ref}
        {...props}
        className={cn(
          "flex flex-col gap-2 px-4 py-4 max-w-72 h-max hover:bg-background/70 hover:cursor-pointer transition-all ease-in-out duration-300 hover:scale-[98%] rounded-lg",
          className
        )}
        onClick={() => addItem(title, price)}>
        <div className="px-32 py-24 bg-background rounded-lg" style={{ backgroundSize: "cover", backgroundRepeat: "no-repeat", backgroundPosition: "center", backgroundImage: `url('${image}')` }} />
        <div className="flex flex-col">
          <p className="font-semibold text-2xl">{title}</p>
          <p className="text-description font-light text-sm">Originaler Preis: {price.toLocaleString('de-DE')}€</p>
        </div>
      </div>
    )
  }
)
ProductCard.displayName = "ProductCard"

export { ProductCard }